"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2295],{9820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(4848),r=t(8453);const i={sidebar_position:11,title:"Test"},a=void 0,o={id:"test",title:"Test",description:"The elide-test-helpers package provides a JSON-API and",source:"@site/docs/test.md",sourceDirName:".",slug:"/test",permalink:"/docs/test",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/test.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Test"},sidebar:"tutorialSidebar",previous:{title:"OpenAPI",permalink:"/docs/openapi"},next:{title:"Performance",permalink:"/docs/performance"}},d={},c=[{value:"Dependencies",id:"dependencies",level:2},{value:"Maven",id:"maven",level:3},{value:"Setup",id:"setup",level:2},{value:"JSON-API DSL",id:"json-api-dsl",level:2},{value:"GraphQL DSL",id:"graphql-dsl",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide/tree/master/elide-test",children:"elide-test-helpers"})," package provides a JSON-API and\nGraphQL type safe DSL that simplifies adding integration tests to your service.  The DSLs are designed to work with\n",(0,s.jsx)(n.a,{href:"http://rest-assured.io/",children:"Rest Assured"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(n.p,{children:["The tests described here are based on a ",(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide-spring-boot-example",children:"the getting started example repo"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The example leverages:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide/tree/master/elide-spring/elide-spring-boot-starter",children:"Elide Spring Boot Starter"})," for running the test service and setting up Elide."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://junit.org/junit5/",children:"JUnit 5"})," for adding tests."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide/tree/master/elide-test",children:"elide-test-helpers"})," for the JSON-API and GraphQL DSLs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"http://rest-assured.io/",children:"Rest Assured"})," for issuing HTTP requests against the test service."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test",children:"Spring Boot Test Starter"})," for\nadding test data for each test."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.h2database.com/html/main.html",children:"H2 In Memory Database"})," for an in memory test database."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.paiondata.elide</groupId>\n    <artifactId>elide-spring-boot-starter</artifactId>\n    <version>${elide.version}</version>\n</dependency>\n\n<dependency>\n    <groupId>com.paiondata.elide</groupId>\n    <artifactId>elide-test-helpers</artifactId>\n    <version>${elide.version}</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>com.jayway.restassured</groupId>\n    <artifactId>rest-assured</artifactId>\n    <version>2.9.0</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <version>${spring.version}</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-api</artifactId>\n    <version>5.5.2</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter-engine</artifactId>\n    <version>5.5.2</version>\n    <scope>test</scope>\n</dependency>\n\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <version>1.4.197</version>\n</dependency>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.p,{children:"Using elide with Spring Boot, we can set up a test service for integration tests by having our test classes extend a\ncommon test base class like this one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"/**\n * Base class for running a set of functional Elide tests.  This class\n * sets up an Elide instance with an in-memory H2 database.\n */\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class IntegrationTest {\n\n    @LocalServerPort\n    int port;\n\n    @BeforeAll\n    public void setUp() {\n        RestAssured.port = port;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"json-api-dsl",children:"JSON-API DSL"}),"\n",(0,s.jsx)(n.p,{children:"Using Rest Assured and the JSON-API DSL, we can issue JSON-API requests and verify responses against our test service.\nThis example uses Spring Boot to initialize the H2 database with a clean set of test records."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'    @Test\n    @Sql(statements = {\n            "DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;",\n            "INSERT INTO ArtifactGroup (name, commonName, description) VALUES\\n" +\n                    "\\t\\t(\'com.example.repository\',\'Example Repository\',\'The code for this project\');"\n    })\n    void jsonApiGetTest() {\n        when()\n            .get("/api/v1/group")\n            .then()\n            .log().all()\n            .body(equalTo(\n                data(\n                    resource(\n                        type( "group"),\n                        id("com.example.repository"),\n                        attributes(\n                            attr("commonName", "Example Repository"),\n                            attr("description", "The code for this project")\n                        ),\n                        relationships(\n                            relation("products")\n                        )\n                    )\n                ).toJSON())\n            )\n            .log().all()\n            .statusCode(HttpStatus.SC_OK);\n    }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The complete set of static DSL operators for JSON-API can be found\n",(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide/blob/master/elide-test/src/main/java/com/paiondata/elide/test/jsonapi/JsonApiDSL.java",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"graphql-dsl",children:"GraphQL DSL"}),"\n",(0,s.jsx)(n.p,{children:"Using Rest Assured and the GraphQL DSL, we can issue GraphQL requests and verify responses against our test service\nlike this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'    @Test\n    @Sql(statements = {\n            "DELETE FROM ArtifactVersion; DELETE FROM ArtifactProduct; DELETE FROM ArtifactGroup;",\n            "INSERT INTO ArtifactGroup (name, commonName, description) VALUES\\n" +\n                    "\\t\\t(\'com.example.repository\',\'Example Repository\',\'The code for this project\');",\n            "INSERT INTO ArtifactGroup (name, commonName, description) VALUES\\n" +\n                    "\\t\\t(\'com.paiondata.elide\',\'Elide\',\'The magical library powering this project\');"\n    })\n    void graphqlTest() {\n        given()\n            .contentType(MediaType.APPLICATION_JSON)\n            .accept(MediaType.APPLICATION_JSON)\n            .body("{ \\"query\\" : \\"" + GraphQLDSL.document(\n                query(\n                    selection(\n                        field("group",\n                            selections(\n                                field("name"),\n                                field("commonName"),\n                                field("description")\n                            )\n                        )\n                    )\n                )\n            ).toQuery() + "\\" }"\n        )\n        .when()\n            .post("/graphql/api/v1")\n            .then()\n            .body(equalTo(GraphQLDSL.document(\n                selection(\n                    field(\n                        "group",\n                        selections(\n                            field("name", "com.example.repository"),\n                            field( "commonName", "Example Repository"),\n                            field("description", "The code for this project")\n                        ),\n                        selections(\n                            field("name", "com.paiondata.elide"),\n                            field( "commonName", "Elide"),\n                            field("description", "The magical library powering this project")\n                        )\n                    )\n                )\n            ).toResponse()))\n            .statusCode(HttpStatus.SC_OK);\n    }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The complete set of static DSL operators for GraphQL can be found ",(0,s.jsx)(n.a,{href:"https://github.com/paion-data/elide/blob/master/elide-test/src/main/java/com/paiondata/elide/test/graphql/GraphQLDSL.java",children:"here"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);